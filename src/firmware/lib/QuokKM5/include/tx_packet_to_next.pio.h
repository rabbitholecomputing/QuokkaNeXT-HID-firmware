// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------------- //
// tx_packet_to_next //
// ----------------- //

#define tx_packet_to_next_wrap_target 2
#define tx_packet_to_next_wrap 11

static const uint16_t tx_packet_to_next_program_instructions[] = {
    0xe001, //  0: set    pins, 1                    
    0xe081, //  1: set    pindirs, 1                 
            //     .wrap_target
    0x80a0, //  2: pull   block                      
    0xe041, //  3: set    y, 1                       
    0xe000, //  4: set    pins, 0                    
    0xe027, //  5: set    x, 7                       
    0x6001, //  6: out    pins, 1                    
    0x0046, //  7: jmp    x--, 6                     
    0xe100, //  8: set    pins, 0                [1] 
    0xe001, //  9: set    pins, 1                    
    0x0084, // 10: jmp    y--, 4                     
    0xc000, // 11: irq    nowait 0                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program tx_packet_to_next_program = {
    .instructions = tx_packet_to_next_program_instructions,
    .length = 12,
    .origin = -1,
};

static inline pio_sm_config tx_packet_to_next_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + tx_packet_to_next_wrap_target, offset + tx_packet_to_next_wrap);
    return c;
}

static inline void tx_packet_to_next_program_init(PIO pio, uint8_t sm, uint32_t offset, uint8_t pin, uint16_t idiv)
{
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_config c = tx_packet_to_next_program_get_default_config(offset);
    sm_config_set_out_shift(&c, true, false, 0);
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_clkdiv_int_frac(&c, idiv, 0);
    pio_set_irq0_source_enabled(pio, pis_interrupt0, true);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
static inline void tx_packet_to_next_send(PIO pio, uint8_t sm, uint16_t data)
{
    io_rw_16 *txfifo = (io_rw_16*) &pio->txf[sm];
    *txfifo = data;
}

#endif
