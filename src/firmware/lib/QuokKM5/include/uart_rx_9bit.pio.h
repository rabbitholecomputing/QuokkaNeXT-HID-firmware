// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// uart_rx_9bit //
// ------------ //

#define uart_rx_9bit_wrap_target 0
#define uart_rx_9bit_wrap 8

static const uint16_t uart_rx_9bit_program_instructions[] = {
            //     .wrap_target
    0x2020, //  0: wait   0 pin, 0                   
    0xea28, //  1: set    x, 8                   [10]
    0x4001, //  2: in     pins, 1                    
    0x0642, //  3: jmp    x--, 2                 [6] 
    0x00c8, //  4: jmp    pin, 8                     
    0xc000, //  5: irq    nowait 0                   
    0x20a0, //  6: wait   1 pin, 0                   
    0x0000, //  7: jmp    0                          
    0x8020, //  8: push   block                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program uart_rx_9bit_program = {
    .instructions = uart_rx_9bit_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config uart_rx_9bit_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + uart_rx_9bit_wrap_target, offset + uart_rx_9bit_wrap);
    return c;
}

static inline void uart_rx_9bit_program_init(PIO pio, uint sm, uint offset, uint pin, uint div) {
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_gpio_init(pio, pin);
    pio_sm_config c = uart_rx_9bit_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin); // for WAIT, IN
    sm_config_set_jmp_pin(&c, pin); // for JMP
    // Shift to left, autopush disabled
    sm_config_set_in_shift(&c, false, false, 32);
    // Deeper FIFO as we're not doing any TX
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    // SM transmits 1 bit per 8 execution cycles.
    sm_config_set_clkdiv_int_frac(&c, div, 0);
    pio_set_irq0_source_enabled(pio, pis_interrupt0, true);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
static inline uint16_t uart_rx_9bit_program_get(PIO pio, uint sm) {
    // 9-bit read from the lower bytes of the FIFO, as data is right-justified
    io_rw_16 *rxfifo_shift = (io_rw_16*)&pio->rxf[sm];
    while (pio_sm_is_rx_fifo_empty(pio, sm))
        tight_loop_contents();
    return (uint16_t)(*rxfifo_shift);
}

#endif
