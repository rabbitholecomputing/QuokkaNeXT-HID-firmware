.program uart_rx_9bit
; //---------------------------------------------------------------------------
; //
; //	QuokKM5 non ADB NeXT keyboard and mouse adapter
; //
; //     Copyright (C) 2024 Rabbit Hole Computing LLC
; //
; //  This file is part of the QuokKM5 project.
; //
; //  This file is free software: you can redistribute it and/or modify it under 
; //  the terms of the GNU General Public License as published by the Free 
; //  Software Foundation, either version 3 of the License, or (at your option) 
; //  any later version.
; //
; //  This file is distributed in the hope that it will be useful, but WITHOUT ANY 
; //  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
; //  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
; //  details.
; //
; //  You should have received a copy of the GNU General Public License along 
; //  with the file. If not, see <https://www.gnu.org/licenses/>.
; //
; //---------------------------------------------------------------------------

; Slightly more fleshed-out 9n1 UART receiver which handles framing errors and
; break conditions more gracefully.
; IN pin 0 and JMP pin are both mapped to the GPIO used as UART RX.

start:
    wait 0 pin 0        ; Stall until start bit is asserted
    set x, 8    [10]    ; Preload bit counter, then delay until halfway through
bitloop:                ; the first data bit (12 cycles incl wait, set).
    in pins, 1          ; Shift data bit into ISR
    jmp x-- bitloop [6] ; Loop 9 times, each loop iteration is 8 cycles
    jmp pin good_stop   ; Check stop bit (should be high)

    irq 0               ; Either a framing error or a break. Set a sticky flag,
    wait 1 pin 0        ; and wait for line to return to idle state.
    jmp start           ; Don't push data if we didn't see good framing.

good_stop:              ; No delay before returning to start; a little slack is
    push                ; important in case the TX clock is slightly too fast.


% c-sdk {
static inline void uart_rx_9bit_program_init(PIO pio, uint sm, uint offset, uint pin, uint div) {
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_gpio_init(pio, pin);

    pio_sm_config c = uart_rx_9bit_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin); // for WAIT, IN
    sm_config_set_jmp_pin(&c, pin); // for JMP
    // Shift to left, autopush disabled
    sm_config_set_in_shift(&c, false, false, 32);
    // Deeper FIFO as we're not doing any TX
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
   
    // SM transmits 1 bit per 8 execution cycles.
    sm_config_set_clkdiv_int_frac(&c, div, 0);
    pio_set_irq0_source_enabled(pio, pis_interrupt0, true);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline uint16_t uart_rx_9bit_program_get(PIO pio, uint sm) {
    // 9-bit read from the lower bytes of the FIFO, as data is right-justified
    io_rw_16 *rxfifo_shift = (io_rw_16*)&pio->rxf[sm];
    while (pio_sm_is_rx_fifo_empty(pio, sm))
        tight_loop_contents();
    return (uint16_t)(*rxfifo_shift);
}
%}